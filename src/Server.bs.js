// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Server$BsSocket = require("bs-socket/src/Server.bs.js");
var Common$ReasonPongMp = require("./Common.bs.js");

function startSocketIOServer(http) {
  console.log("starting socket server");
  var MyServer = Server$BsSocket.Make([]);
  var io = Curry._1(MyServer[/* createWithHttp */0], http);
  var playerA = [false];
  var state = [Common$ReasonPongMp.initialState(/* X */0)];
  return Curry._2(MyServer[/* onConnect */15], io, (function (socket) {
                console.log("Got a connection!");
                var you = playerA[0] ? /* O */1 : (playerA[0] = true, /* X */0);
                var init = state[0];
                Curry._2(MyServer[/* Socket */14][/* emit */4], socket, /* OnConnection */Block.__(1, [/* record */[
                          /* grid */init[/* grid */0],
                          /* turn */init[/* turn */1],
                          /* winner */init[/* winner */2],
                          /* you */you
                        ]]));
                Curry._2(MyServer[/* Socket */14][/* onDisconnect */15], socket, (function () {
                        if (you === /* X */0) {
                          playerA[0] = false;
                          return /* () */0;
                        } else {
                          return 0;
                        }
                      }));
                return Curry._2(MyServer[/* Socket */14][/* on */3], socket, (function (action) {
                              state[0] = Common$ReasonPongMp.updateState(action, state[0]);
                              return Curry._2(MyServer[/* Socket */14][/* broadcast */5], socket, action);
                            }));
              }));
}

exports.startSocketIOServer = startSocketIOServer;
/* Server-BsSocket Not a pure module */
